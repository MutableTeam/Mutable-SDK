class i{constructor(i,t){this.config=i,this.logger=t}async initialize(){this.logger.info("Initializing AuthModule")}setPlayer(i){this.player=i,this.logger.info("Player set in AuthModule",i)}getPlayer(){return this.player}async authenticateAsGuest(i){try{this.logger.info("Authenticating as guest");const t={id:`guest-${Date.now()}`,name:i||`Guest_${Math.floor(1e4*Math.random())}`};return this.player=t,this.logger.info("Guest authentication successful",{playerId:t.id}),t}catch(i){throw this.logger.error("Guest authentication failed",i),i}}}class t{constructor(i,t){this.config=i,this.logger=t}async initialize(i){this.logger.info("Initializing GameStateModule",i),this.gameInfo=i}setPlayer(i){this.player=i,this.logger.info("Player set in GameStateModule",i)}}class e{constructor(i,t){this.config=i,this.logger=t}async initialize(){this.logger.info("Initializing TransactionsModule")}setPlayer(i){this.player=i,this.logger.info("Player set in TransactionsModule",i)}async getBalance(i="MUTB"){try{return this.logger.info("Getting player balance",{currency:i}),1e3}catch(i){throw this.logger.error("Failed to get player balance",i),i}}}class s{constructor(i=!1){this.prefix="[MutableSDK]",this.debug=i}setDebug(i){this.debug=i}debug(i,t){this.debug&&(t?console.debug(`${this.prefix} ${i}`,t):console.debug(`${this.prefix} ${i}`))}info(i,t){t?console.info(`${this.prefix} ${i}`,t):console.info(`${this.prefix} ${i}`)}warn(i,t){t?console.warn(`${this.prefix} ${i}`,t):console.warn(`${this.prefix} ${i}`)}error(i,t){t?console.error(`${this.prefix} ${i}`,t):console.error(`${this.prefix} ${i}`)}}class n{constructor(n){this.initialized=!1,this.config={environment:"production",debug:!1,apiUrl:this.getDefaultApiUrl(n.environment||"production"),...n},this.logger=new s(this.config.debug||!1),this.auth=new i(this.config,this.logger),this.gameState=new t(this.config,this.logger),this.transactions=new e(this.config,this.logger),this.logger.info("MutableSDK instance created")}async initialize(i){try{if(this.logger.info("Initializing MutableSDK",i),!i.id||!i.name||!i.version)throw new Error("Game information is incomplete. id, name, and version are required.");this.gameInfo=i,await this.auth.initialize(),await this.gameState.initialize(i),await this.transactions.initialize(),this.initialized=!0,this.logger.info("MutableSDK initialized successfully")}catch(i){throw this.logger.error("Failed to initialize MutableSDK",i),i}}setPlayer(i){this.playerInfo=i,this.auth.setPlayer(i),this.gameState.setPlayer(i),this.transactions.setPlayer(i),this.logger.info("Player information set",i)}getPlayer(){return this.playerInfo}getGameInfo(){return this.gameInfo}isInitialized(){return this.initialized}getConfig(){return{...this.config}}getDefaultApiUrl(i){switch(i){case"development":return"https://dev-api.mutable.io";case"staging":return"https://staging-api.mutable.io";default:return"https://api.mutable.io"}}}const r="1.0.0";export{i as AuthModule,t as GameStateModule,n as MutableSDK,e as TransactionsModule,r as VERSION};
//# sourceMappingURL=index.esm.js.map
