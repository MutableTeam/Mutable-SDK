!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).MutableSDK={})}(this,(function(e){"use strict";class t{constructor(e,t){this.config=e,this.logger=t}async initialize(){this.logger.info("Initializing AuthModule")}setPlayer(e){this.player=e,this.logger.info("Player set in AuthModule",e)}getPlayer(){return this.player}async authenticateAsGuest(e){try{this.logger.info("Authenticating as guest");const t={id:`guest-${Date.now()}`,name:e||`Guest_${Math.floor(1e4*Math.random())}`};return this.player=t,this.logger.info("Guest authentication successful",{playerId:t.id}),t}catch(e){throw this.logger.error("Guest authentication failed",e),e}}}class i{constructor(e,t){this.config=e,this.logger=t}async initialize(e){this.logger.info("Initializing GameStateModule",e),this.gameInfo=e}setPlayer(e){this.player=e,this.logger.info("Player set in GameStateModule",e)}}class s{constructor(e,t){this.config=e,this.logger=t}async initialize(){this.logger.info("Initializing TransactionsModule")}setPlayer(e){this.player=e,this.logger.info("Player set in TransactionsModule",e)}async getBalance(e="MUTB"){try{return this.logger.info("Getting player balance",{currency:e}),1e3}catch(e){throw this.logger.error("Failed to get player balance",e),e}}}class o{constructor(e,t){this.config=e,this.logger=t}async initialize(e){this.logger.info("Initializing AnalyticsModule",e),this.gameInfo=e}setPlayer(e){this.player=e,this.logger.info("Player set in AnalyticsModule",e)}setSessionId(e){this.sessionId=e,this.logger.info("Session ID set in AnalyticsModule",{sessionId:e})}trackEvent(e,t){var i;try{if(!this.gameInfo)throw new Error("AnalyticsModule not initialized with game info");const s={eventType:e,timestamp:Date.now(),gameId:this.gameInfo.id,sessionId:this.sessionId,playerId:null===(i=this.player)||void 0===i?void 0:i.id,data:t};this.logger.debug("Tracking event",s),this.logger.info(`Event tracked: ${e}`,t)}catch(e){this.logger.error("Failed to track event",e)}}trackGameStart(e){this.trackEvent("game_start",e)}trackGameEnd(e){this.trackEvent("game_end",e)}cleanup(){this.logger.info("Cleaning up AnalyticsModule")}}class n{constructor(e,t){this.config=e,this.logger=t}async initialize(){this.logger.info("Initializing UnityBridgeModule")}setPlayer(e){this.player=e,this.logger.info("Player set in UnityBridgeModule",e),this.unityInstance&&this.sendToUnity("SetPlayer",JSON.stringify(e))}async loadUnity(e,t){try{return this.logger.info("Loading Unity WebGL build",t),this.logger.info("Unity WebGL build loaded successfully"),this.unityInstance={SendMessage:(e,t,i)=>{this.logger.debug(`Unity SendMessage: ${e}.${t}(${i})`)}},this.player&&this.sendToUnity("SetPlayer",JSON.stringify(this.player)),this.unityInstance}catch(e){throw this.logger.error("Failed to load Unity WebGL build",e),e}}sendToUnity(e,t,i="MutableSDKBridge"){if(this.unityInstance)try{this.logger.debug(`Sending message to Unity: ${e}`,t),this.unityInstance.SendMessage(i,e,t)}catch(t){this.logger.error(`Failed to send message to Unity: ${e}`,t)}else this.logger.warn("Unity not loaded, cannot send message")}handleUnityMessage(e){try{this.logger.debug("Received message from Unity",e);const t=JSON.parse(e);switch(t.type){case"ready":this.logger.info("Unity is ready");break;case"event":this.logger.info("Unity event",t.data);break;default:this.logger.warn("Unknown message type from Unity",t)}}catch(e){this.logger.error("Failed to handle message from Unity",e)}}}class a{constructor(e,t){this.config=e,this.logger=t}async initialize(){this.logger.info("Initializing GodotBridgeModule")}setPlayer(e){this.player=e,this.logger.info("Player set in GodotBridgeModule",e),this.godotInstance&&this.sendToGodot("set_player",JSON.stringify(e))}async loadGodot(e,t){try{return this.logger.info("Loading Godot WebGL build",t),this.logger.info("Godot WebGL build loaded successfully"),this.godotInstance={_mutableBridge:{sendMessage:(e,t)=>{this.logger.debug(`Godot sendMessage: ${e}(${t})`)}}},this.player&&this.sendToGodot("set_player",JSON.stringify(this.player)),this.godotInstance}catch(e){throw this.logger.error("Failed to load Godot WebGL build",e),e}}sendToGodot(e,t){if(this.godotInstance)try{this.logger.debug(`Sending message to Godot: ${e}`,t),this.godotInstance._mutableBridge.sendMessage(e,t)}catch(t){this.logger.error(`Failed to send message to Godot: ${e}`,t)}else this.logger.warn("Godot not loaded, cannot send message")}handleGodotMessage(e){try{this.logger.debug("Received message from Godot",e);const t=JSON.parse(e);switch(t.type){case"ready":this.logger.info("Godot is ready");break;case"event":this.logger.info("Godot event",t.data);break;default:this.logger.warn("Unknown message type from Godot",t)}}catch(e){this.logger.error("Failed to handle message from Godot",e)}}}class r{constructor(e=!1){this.prefix="[MutableSDK]",this.isDebugEnabled=e}setDebug(e){this.isDebugEnabled=e}debug(e,t){this.isDebugEnabled&&(t?console.debug(`${this.prefix} ${e}`,t):console.debug(`${this.prefix} ${e}`))}info(e,t){t?console.info(`${this.prefix} ${e}`,t):console.info(`${this.prefix} ${e}`)}warn(e,t){t?console.warn(`${this.prefix} ${e}`,t):console.warn(`${this.prefix} ${e}`)}error(e,t){t?console.error(`${this.prefix} ${e}`,t):console.error(`${this.prefix} ${e}`)}}e.AnalyticsModule=o,e.AuthModule=t,e.GameStateModule=i,e.GodotBridgeModule=a,e.MutableSDK=class{constructor(e){this.initialized=!1,this.config={environment:"production",debug:!1,apiUrl:this.getDefaultApiUrl(e.environment||"production"),websocketUrl:this.getDefaultWebsocketUrl(e.environment||"production"),...e},this.logger=new r(this.config.debug||!1),this.auth=new t(this.config,this.logger),this.gameState=new i(this.config,this.logger),this.transactions=new s(this.config,this.logger),this.analytics=new o(this.config,this.logger),this.unityBridge=new n(this.config,this.logger),this.godotBridge=new a(this.config,this.logger),this.logger.info("MutableSDK instance created")}async initialize(e){try{if(this.logger.info("Initializing MutableSDK",e),!e.id||!e.name||!e.version)throw new Error("Game information is incomplete. id, name, and version are required.");this.gameInfo=e,await this.auth.initialize(),await this.gameState.initialize(e),await this.transactions.initialize(),await this.analytics.initialize(e),await this.unityBridge.initialize(),await this.godotBridge.initialize(),this.initialized=!0,this.logger.info("MutableSDK initialized successfully")}catch(e){throw this.logger.error("Failed to initialize MutableSDK",e),e}}setPlayer(e){this.playerInfo=e,this.auth.setPlayer(e),this.gameState.setPlayer(e),this.transactions.setPlayer(e),this.analytics.setPlayer(e),this.unityBridge.setPlayer(e),this.godotBridge.setPlayer(e),this.logger.info("Player information set",e)}getPlayer(){return this.playerInfo}getGameInfo(){return this.gameInfo}isInitialized(){return this.initialized}getConfig(){return{...this.config}}getDefaultApiUrl(e){switch(e){case"development":return"https://dev-api.mutable.io";case"staging":return"https://staging-api.mutable.io";default:return"https://api.mutable.io"}}getDefaultWebsocketUrl(e){switch(e){case"development":return"wss://dev-ws.mutable.io";case"staging":return"wss://staging-ws.mutable.io";default:return"wss://ws.mutable.io"}}},e.TransactionsModule=s,e.UnityBridgeModule=n,e.VERSION="1.0.0",Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=index.umd.js.map
