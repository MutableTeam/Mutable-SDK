!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).MutableSDK={})}(this,(function(e){"use strict";class t{constructor(e,t){this.config=e,this.logger=t}async initialize(){this.logger.info("Initializing AuthModule")}setPlayer(e){this.player=e,this.logger.info("Player set in AuthModule",e)}getPlayer(){return this.player}async authenticateAsGuest(e){try{this.logger.info("Authenticating as guest");const t={id:`guest-${Date.now()}`,name:e||`Guest_${Math.floor(1e4*Math.random())}`};return this.player=t,this.logger.info("Guest authentication successful",{playerId:t.id}),t}catch(e){throw this.logger.error("Guest authentication failed",e),e}}}class i{constructor(e,t){this.config=e,this.logger=t}async initialize(e){this.logger.info("Initializing GameStateModule",e),this.gameInfo=e}setPlayer(e){this.player=e,this.logger.info("Player set in GameStateModule",e)}}class n{constructor(e,t){this.config=e,this.logger=t}async initialize(){this.logger.info("Initializing TransactionsModule")}setPlayer(e){this.player=e,this.logger.info("Player set in TransactionsModule",e)}async getBalance(e="MUTB"){try{return this.logger.info("Getting player balance",{currency:e}),1e3}catch(e){throw this.logger.error("Failed to get player balance",e),e}}}class s{constructor(e=!1){this.prefix="[MutableSDK]",this.debug=e}setDebug(e){this.debug=e}debug(e,t){this.debug&&(t?console.debug(`${this.prefix} ${e}`,t):console.debug(`${this.prefix} ${e}`))}info(e,t){t?console.info(`${this.prefix} ${e}`,t):console.info(`${this.prefix} ${e}`)}warn(e,t){t?console.warn(`${this.prefix} ${e}`,t):console.warn(`${this.prefix} ${e}`)}error(e,t){t?console.error(`${this.prefix} ${e}`,t):console.error(`${this.prefix} ${e}`)}}e.AuthModule=t,e.GameStateModule=i,e.MutableSDK=class{constructor(e){this.initialized=!1,this.config={environment:"production",debug:!1,apiUrl:this.getDefaultApiUrl(e.environment||"production"),...e},this.logger=new s(this.config.debug||!1),this.auth=new t(this.config,this.logger),this.gameState=new i(this.config,this.logger),this.transactions=new n(this.config,this.logger),this.logger.info("MutableSDK instance created")}async initialize(e){try{if(this.logger.info("Initializing MutableSDK",e),!e.id||!e.name||!e.version)throw new Error("Game information is incomplete. id, name, and version are required.");this.gameInfo=e,await this.auth.initialize(),await this.gameState.initialize(e),await this.transactions.initialize(),this.initialized=!0,this.logger.info("MutableSDK initialized successfully")}catch(e){throw this.logger.error("Failed to initialize MutableSDK",e),e}}setPlayer(e){this.playerInfo=e,this.auth.setPlayer(e),this.gameState.setPlayer(e),this.transactions.setPlayer(e),this.logger.info("Player information set",e)}getPlayer(){return this.playerInfo}getGameInfo(){return this.gameInfo}isInitialized(){return this.initialized}getConfig(){return{...this.config}}getDefaultApiUrl(e){switch(e){case"development":return"https://dev-api.mutable.io";case"staging":return"https://staging-api.mutable.io";default:return"https://api.mutable.io"}}},e.TransactionsModule=n,e.VERSION="1.0.0",Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=index.umd.js.map
